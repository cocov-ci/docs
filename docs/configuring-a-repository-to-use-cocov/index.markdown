---
title: "Configuring a Repository to Use Cocov"
id: "configuring-a-repository-to-use-cocov"
layout: documentation
---

Cocov offers two services for repositories: Coverage monitoring, and issue
detection. One component does not require the other, but enabling both will
provide the complete experience.

## Coverage Monitoring

The platform is capable of receiving and interpreting coverage data from several
coverage formats, and can keep information regarding those results for
statistical data, and also to allow maintainers to automatically reject changes
that does not keep the total coverage percentage above a certain limit.

For more information on this topic, see:

- {% doclink "Checks & Limits: The Manifest File" %} to understand how to define
limits on coverage percentage
- {% doclink "Blocking PRs using Cocov Results" %} to learn how to leverage
GitHub's Branch Protection Rules to prevent noncompliant Pull Requests from
being merged.
- {% doclink "Uploading Test Coverage to Cocov" %} to learn how to upload
coverage data generated by your test suite to a Cocov instance

## Checks & You: How to Maintain Consistency and Security

Along with Coverage Monitoring, Cocov also leverages well-known open-source
tools to detect for style inconsistencies, security issues, and virtually any
other aspect of your repository's code as long as there's a plugin for that
task.

Detected issues can also be used to prevent pull-requests from being merged,
ensuring, for instance, that new changes are always sent patching new or
existing problems.

- {% doclink "Checks & Limits: The Manifest File" %} to understand how to define
limits on coverage percentage
- {% doclink "Blocking PRs using Cocov Results" %} to learn how to leverage
GitHub's Branch Protection Rules to prevent noncompliant Pull Requests from
being merged.

## Preventing Collaborators from Bypassing Cocov Checks

As Cocov relies on a single configuration file, it is possible for
collaborators to change it in order to disable or alter how the platform
behaves on a given repository. To prevent those changes, being they accidental
or not, GitHub provides mechanisms to limit or ensure certain files are reviewed
before PRs are merged. See more about that on
{% doclink "Protecting the Manifest File" %}.

